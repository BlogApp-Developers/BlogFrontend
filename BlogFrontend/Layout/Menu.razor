@page "/menu"
@using BlogFrontend.Models
@using System.Text.Json
@using System.Text.RegularExpressions
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<div class="menu" id="menu" data-first-topic-id="@firstTopicId">
    <div class="menu-content menu-items dragscroll">
        @if (topics != null && topics.Any())
        {
            @foreach (var topic in topics)
            {
                <a class="menu-item @((selectedTopicId == topic.Id) ? "active" : "")"
                   id="topic-@topic.Id"
                   href="javascript:void(0);"
                   @onclick="() => SetActiveTopic(topic.Id)">
                    @topic.Name
                </a>
            }
        }
    </div>
</div>

@code {
    private List<Topic> topics;
    private int? selectedTopicId;
    private int? firstTopicId;
    private Guid userId;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (queryParams.TryGetValue("userId", out var extractedUserId))
        {
            if (Guid.TryParse(extractedUserId.FirstOrDefault(), out var parsedUserId))
            {
                userId = parsedUserId;
                await LoadTopics();
            }
            else
            {
                Console.Error.WriteLine("Invalid User ID format.");
            }
        }
        else
        {
            Console.Error.WriteLine("User ID is missing in the URL");
        }

        if (topics != null && topics.Any())
        {
            firstTopicId = topics.First().Id;
            selectedTopicId = firstTopicId;
            await LoadBlogs(firstTopicId.Value);
        }
    }

    private async Task LoadTopics()
{
    try
    {
        var response = await HttpClient.GetAsync($"http://localhost:5149/api/Topic/GetUserTopics/{userId}");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            json = RemoveMetadataFromJson(json);
            topics = JsonSerializer.Deserialize<List<Topic>>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        else
        {
            Console.Error.WriteLine($"Error: {response.ReasonPhrase}");
        }
    }
    catch (Exception ex)
    {
        Console.Error.WriteLine($"Error loading topics: {ex.Message}");
    }
}

private string RemoveMetadataFromJson(string json)
{
    return Regex.Replace(json, @"\{""\$id"":""\d+"",""(\$values|\$ref)"":\[\]?\}", "{}");
}


    private async Task SetActiveTopic(int topicId)
    {
        selectedTopicId = topicId;
        await LoadBlogs(topicId);
    }

    private async Task LoadBlogs(int topicId)
    {
        try
        {
            var response = await HttpClient.GetAsync($"/api/GetBlogsByTopic?topicId={topicId}");
            if (response.IsSuccessStatusCode)
            {
                var blogs = await response.Content.ReadFromJsonAsync<List<Blog>>();
            }
            else
            {
                Console.Error.WriteLine($"Error: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading blogs: {ex.Message}");
        }
    }

    public class BlogItem
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string AuthorName { get; set; }
        public string CreationDate { get; set; }
        public string ImageUrl { get; set; }
    }
}