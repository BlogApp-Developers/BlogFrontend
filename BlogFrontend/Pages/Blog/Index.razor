@page "/Blogs"
@attribute [Authorize]
@using BlogFrontend.Models
@using BlogFrontend.Providers
@using BlogFrontend.Services
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using System.Security.Claims
@inject TopicService TopicService
@inject BlogService BlogService
@inject NavigationManager Navigation
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime


<div class="blog-page">
    <Header OnSearchCompleted="HandleSearchCompleted" />
    <Menu OnTopicSelected="LoadBlogs"  OnTopicsUpdated="LoadTopicsInMenu" />
    <div class="blog-container">
        <div class="blog-list" id="blog-list">
            @if (blogs != null)
            {
                @foreach (var blog in blogs)
                {
                    <a href="blog/@blog.Id" class="blog-link">
                        <div class="blog-item">
                            <div class="content">
                                <div class="author">
                                    <img src="@AvatarUrl" alt="Avatar" style="width: 30px; height: 30px; border-radius: 100px; margin-right: 12px;">
                                    @blog.UserName
                                </div>
                                <div class="title">@blog.Title</div>
                                <div class="date">@blog.CreationDate.ToShortDateString()</div>
                            </div>
                            <img class="blog-img" src="http://localhost:5149/api/Blog/Image/@blog.Id" alt="@blog.Title">
                        </div>
                    </a>
                }
            }
            else
            {
                <p>No blogs available for the topic: <span style="color: #9BD21C;">@selectedTopicName</span></p>
            }
        </div>
        <div class="blog-right-side">
            <div class="recommendation-block">
                <h2>Recommended topics</h2>
                <div class="recommendation-block-topics">
                    @if (recommendedTopics != null && recommendedTopics.Any())
                    {
                        @foreach (var topic in recommendedTopics)
                        {
                            <button @onclick="() => AddTopicToUser(topic.Id)">@topic.Name</button>
                        }
                    }
                    else
                    {
                        <p>No more recommended topics</p>
                    }
                </div>
            </div>
            <div class="follow-block">
                <h2>Who to follow</h2>
                @if (usersToFollow.Any())
                {
                    @foreach (var user in usersToFollow)
                    {
                        var currentUser = user;
                        var isFollowing = followingStates[currentUser.Id];
                        <div class="person" style="display: flex;">
                            <div class="author">
                                <img src="@currentUser.AvatarUrl" alt="Avatar" style="width: 30px; height: 30px; border-radius: 100px; margin-right: 12px;">
                            </div>
                            <div class="discription" style="flex: 0.9;">
                                <div class="username">
                                    @currentUser.UserName
                                </div>
                                <div class="about-me">
                                    @currentUser.AboutMe
                                </div>
                            </div>
                            <button class="follow-button" 
                                    style="background-color:@(isFollowing ? "red" : "transparent")" 
                                    @onclick="() => ToggleFollow(currentUser.Id)">
                                @(isFollowing ? "Unfollow" : "Follow")
                            </button>
                        </div>
                    }
                }
                else
                {
                    <p>No users to follow</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<BlogDto> blogs = new();
    private Guid UserId { get; set; }
    private string selectedTopicName;
    private List<Topic> recommendedTopics = new List<Topic>();
    private string AvatarUrl;
    private List<UserDto> usersToFollow = new();
    private Dictionary<Guid, bool> followingStates = new Dictionary<Guid, bool>();


    protected override async Task OnInitializedAsync()
    {
        var userIdString = await LocalStorageService.GetItemAsync<string>("userId");

        if (Guid.TryParse(userIdString, out var parsedUserId))
        {
            UserId = parsedUserId;
        }
        else
        {
            Console.Error.WriteLine("Invalid User ID format.");
        }

        var token = await LocalStorageService.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            
            AvatarUrl = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData)?.Value;
        }

        await LoadRecommendedTopics();
        var topicList = await TopicService.GetTopicsAsync();

        var response = await HttpClient.GetFromJsonAsync<List<UserDto>>($"api/Follow/WhoToFollow");
        if (response != null)
        {
            usersToFollow = response;
        }

        foreach (var user in usersToFollow)
        {
            followingStates[user.Id] = false;
        }
    }

    private async Task ToggleFollow(Guid userId)
    {
        if (followingStates.ContainsKey(userId))
        {
            followingStates[userId] = !followingStates[userId];

            if (followingStates[userId])
            {
                await FollowUser(userId);
            }
            else
            {
                @* await UnfollowUser(userId); *@
            }
        }
    }

    private async Task FollowUser(Guid userId)
    {
        var result = await HttpClient.PostAsync($"api/Follow/Follow/{userId}", null);
        if (result.IsSuccessStatusCode)
        {
            
        }
    }

    private void HandleSearchCompleted(List<BlogDto> searchResults)
    {
        blogs = searchResults;
        StateHasChanged();
    }

    private async Task SetAuthorizationHeader()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (!string.IsNullOrEmpty(token))
        {
            token = token.Trim('"');
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private async Task LoadBlogs((int topicId, string topicName) topicInfo)
    {
        selectedTopicName = topicInfo.topicName;
        await SetAuthorizationHeader();

        var request = new HttpRequestMessage(HttpMethod.Get, $"http://localhost:5149/api/Blog/GetBlogsByTopic/{topicInfo.topicId}");

        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            blogs = await response.Content.ReadFromJsonAsync<List<BlogDto>>();
            StateHasChanged();
        }
        else
        {
            blogs = null;
            StateHasChanged();
        }
    }

    private async Task LoadRecommendedTopics()
    {
        await SetAuthorizationHeader();
        var response = await HttpClient.GetAsync($"http://localhost:5149/api/Topic/RecommendedTopics/{UserId}");
        if (response.IsSuccessStatusCode)
        {
            recommendedTopics = await response.Content.ReadFromJsonAsync<List<Topic>>() ?? new List<Topic>();
        }
    }

    private async Task AddTopicToUser(int topicId)
    {
        await SetAuthorizationHeader();
        var response = await HttpClient.PostAsync($"http://localhost:5149/api/Topic/AddTopicToUser/{UserId}/{topicId}", null);
        if (response.IsSuccessStatusCode)
        {
            await LoadRecommendedTopics();

            await LoadTopicsInMenu();
            StateHasChanged();
        }
    }

    private async Task LoadTopicsInMenu()
    {
        await InvokeAsync(StateHasChanged);
    }
}
