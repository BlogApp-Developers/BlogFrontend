@page "/Blogs"
@attribute [Authorize]
@using BlogFrontend.Models
@using BlogFrontend.Providers
@using BlogFrontend.Services
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@inject TopicService TopicService
@inject BlogService BlogService
@inject NavigationManager Navigation
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime

<div class="blog-page">
    <Header OnSearchCompleted="HandleSearchCompleted" />
    <Menu OnTopicSelected="LoadBlogs" />
    <div class="blog-container">
        <div class="blog-list" id="blog-list">
            @if (blogs != null)
            {
                @foreach (var blog in blogs)
                {
                    <a href="blog/@blog.Id?userId=@UserId" class="blog-link">
                        <div class="blog-item">
                            <div class="content">
                                <div class="author">@blog.UserName</div>
                                <div class="title">@blog.Title</div>
                                <div class="date">@blog.CreationDate.ToShortDateString()</div>
                            </div>
                            <img class="blog-img" src="@blog.PictureUrl" alt="@blog.Title">
                        </div>
                    </a>
                }
            }
        </div>
        <div class="blog-right-side">
            <div class="recommendation-block">
                <h2>Recommended topics</h2>
                <div class="recommendation-block-topics">
                    <button>Photography</button>
                    <button>Poetry</button>
                    <button>Space</button>
                    <button>Money</button>
                </div>
            </div>
            <div class="follow-block">
                <h2>Who to follow</h2>
                <div class="person">
                    <h5>Aamatullah Rajkotwala</h5>
                    <p>I like to write about movies, literature, pop culture and...</p>
                    <button class="follow-button">Follow</button>
                </div>
                <div class="person">
                    <h5>Marvel Gomulya</h5>
                    <p>Indonesian Builder! Writings about philosophy, human...</p>
                    <button class="follow-button">Follow</button>
                </div>
                <div class="person">
                    <h5>Natasha MH</h5>
                    <p>Writes on life, Travel, inspiration and Culture.</p>
                    <button class="follow-button">Follow</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<BlogDto> blogs = new();
    private string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);
        UserId = queryParameters["userId"];

        var topicList = await TopicService.GetTopicsAsync();
    }

    private void HandleSearchCompleted(List<BlogDto> searchResults)
    {
        blogs = searchResults;
        StateHasChanged();
    }

    private async Task SetAuthorizationHeader()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (!string.IsNullOrEmpty(token))
        {
            token = token.Trim('"');
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private async Task LoadBlogs(int topicId)
    {
        await SetAuthorizationHeader();

        var request = new HttpRequestMessage(HttpMethod.Get, $"http://localhost:5149/api/Blog/GetBlogsByTopic/{topicId}");

        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var loadedBlogs = await response.Content.ReadFromJsonAsync<List<BlogDto>>();
            if (loadedBlogs != null)
            {
                blogs = new List<BlogDto>();

                foreach (var blog in loadedBlogs)
                {
                    blog.PictureUrl = await GetImageUrlAsync(blog.Id);
                    blogs.Add(blog);
                }

                StateHasChanged();
            }
        }
        else
        {
            Console.Error.WriteLine($"Error: {response.ReasonPhrase}");
        }
    }

    private async Task<string> GetImageUrlAsync(Guid blogId)
    {
        await SetAuthorizationHeader();

        var request = new HttpRequestMessage(HttpMethod.Get, $"http://localhost:5149/api/Blog/Image/{blogId}");

        var response = await HttpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            return response.RequestMessage.RequestUri.ToString();
        }
        else
        {
            return "Assets/IMG/DefaultImage.jpg";
        }
    }
}
