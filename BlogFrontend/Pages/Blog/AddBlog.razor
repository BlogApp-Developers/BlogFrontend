@page "/AddBlog"
@attribute [Authorize]
@using BlogFrontend.Models
@using BlogFrontend.Providers
@using BlogFrontend.Services
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject TopicService TopicService
@inject BlogService BlogService
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService

<div class="blog-page" style="color: #fff;">
    <Header OnSearchCompleted="HandleSearchCompleted" />
    <Menu OnTopicSelected="LoadBlogs" />

    <div class="blog-container">
        <EditBlock />
        <div class="blog-right-side get-blog-right-side">
            <div class="blog-list right-side-list" id="blog-list">
                @if (blogs != null)
                {
                    @foreach (var blog in blogs)
                    {
                        <a href="blog/@blog.Id" class="blog-link">
                            <div class="blog-item">
                                <div class="content">
                                    <div class="author">
                                        <img src="@AvatarUrl" alt="Avatar" style="width: 30px; height: 30px; border-radius: 100px; margin-right: 12px;">
                                        @blog.UserName
                                    </div>
                                    <div class="title">@blog.Title</div>
                                    <div class="date">@blog.CreationDate.ToShortDateString()</div>
                                </div>
                                <img class="blog-img" src="http://20.93.118.201:5149/api/Blog/Image/@blog.Id" alt="@blog.Title">
                            </div>
                        </a>
                    }
                }
                else
                {
                    <p>No blogs available for the topic: <span style="color: #9BD21C;">@selectedTopicName</span></p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid BlogId { get; set; }
    
    private BlogDto Blog { get; set; }
    private IEnumerable<Topic> Topics { get; set; }
    private Guid UserId { get; set; }
    private List<Topic> topics = new();
    private List<BlogDto> blogs = new();
    private int? selectedTopicId;
    private string selectedTopicName;
    private string AvatarUrl;

    protected override async Task OnInitializedAsync()
    {
        var userIdString = await LocalStorageService.GetItemAsync<string>("userId");

        if (Guid.TryParse(userIdString, out var parsedUserId))
        {
            UserId = parsedUserId;
        }
        else
        {
            Console.Error.WriteLine("Invalid User ID format.");
        }

        var token = await LocalStorageService.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            
            AvatarUrl = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData)?.Value;
        }
    
        await LoadBlogDetails();
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadBlogDetails();
        StateHasChanged();
    }

        private void HandleSearchCompleted(List<BlogDto> searchResults)
    {
        blogs = searchResults;
        StateHasChanged();
    }
    
    private async Task SetAuthorizationHeader()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (!string.IsNullOrEmpty(token))
        {
            token = token.Trim('"');
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private async Task LoadBlogDetails()
    {
        await SetAuthorizationHeader();

        Blog = await HttpClient.GetFromJsonAsync<BlogDto>($"http://20.93.118.201:5149/api/Blog/GetBlogById/{BlogId}");
            StateHasChanged();
        if (Blog == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task LoadBlogs((int topicId, string topicName) topicInfo)
    {
        selectedTopicName = topicInfo.topicName;
        await SetAuthorizationHeader();

        var request = new HttpRequestMessage(HttpMethod.Get, $"http://20.93.118.201:5149/api/Blog/GetBlogsByTopic/{topicInfo.topicId}");

        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            blogs = await response.Content.ReadFromJsonAsync<List<BlogDto>>();
            StateHasChanged();
        }
        else
        {
            blogs = null;
            StateHasChanged();
        }
    }
}