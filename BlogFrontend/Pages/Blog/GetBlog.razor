@page "/blog/{BlogId:guid}"
@attribute [Authorize]
@using Blazored.LocalStorage
@using BlogFrontend.Models
@using BlogFrontend.Services
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@inject TopicService TopicService
@inject BlogService BlogService
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService


<div class="blog-page" style="color: #fff;">
    <Header OnSearchCompleted="HandleSearchCompleted" />
    <Menu OnTopicSelected="LoadBlogs" />

    <div class="blog-container">
        <div class="blog-details">
            <div class="blog-header">
                <h1 class="blog-title2">@Blog?.Title</h1>
                <p>by @Blog.UserName on @Blog.CreationDate.ToShortDateString()</p>
            </div>
            <div class="blog-content" style="width: 700px; margin-top: 25px">
                @if (Blog != null)
                {
                    @((MarkupString)Blog.Text)
                }
            </div>
            <div class="blog-image">
                <img src="http://localhost:5149/api/Blog/Image/@Blog.Id" alt="@Blog?.Title" width="700" height="700"/>
            </div>
            <hr style="color: #fff;">
            <div class="blog-actions">
                <button @onclick="LikeBlog" class="like-button">
                    <img src="@LikeIcon" alt="Like" />
                    <span>@Blog.LikesCount Likes</span>
                </button>
                <button @onclick="OpenComments" class="comment-button">
                    <img src="Assets/IMG/comment-icon.svg" alt="Comment" />
                </button>
            </div>
                <hr style="color: #fff;">
        </div>
        <div class="blog-right-side">
            <div class="blog-list right-side-list" id="blog-list">
                @if (blogs != null)
                {
                    @foreach (var blog in blogs)
                    {
                        <a href="blog/@blog.Id?userId=@UserId" class="blog-link">
                            <div class="blog-item">
                                <div class="content">
                                    <div class="author">@blog.UserName</div>
                                    <div class="title">@blog.Title</div>
                                    <div class="date">@blog.CreationDate.ToShortDateString()</div>
                                </div>
                                <img class="blog-img" src="http://localhost:5149/api/Blog/Image/@blog.Id" alt="@blog.Title">
                            </div>
                        </a>
                    }
                }
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid BlogId { get; set; }
    
    private BlogDto Blog { get; set; }
    private IEnumerable<Topic> Topics { get; set; }
    private Guid UserId { get; set; }
    private List<Topic> topics = new();
    private List<BlogDto> blogs = new();
    private int? selectedTopicId;
    private string LikeIcon { get; set; } = "Assets/IMG/like-icon-gray.svg";

    protected override async Task OnInitializedAsync()
    {
        var userIdString = await LocalStorageService.GetItemAsync<string>("userId");

        if (Guid.TryParse(userIdString, out var parsedUserId))
        {
            UserId = parsedUserId;
        }
        else
        {
            Console.Error.WriteLine("Invalid User ID format.");
        }
    
        await LoadBlogDetails();
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadBlogDetails();
        StateHasChanged();
    }

    private void HandleSearchCompleted(List<BlogDto> searchResults)
    {
        blogs = searchResults;
        StateHasChanged();
    }

    private async Task SetAuthorizationHeader()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (!string.IsNullOrEmpty(token))
        {
            token = token.Trim('"');
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private async Task<int> GetLikeCount()
    {
        await SetAuthorizationHeader();

        var response = await HttpClient.GetAsync($"http://localhost:5149/api/Likes/GetLikesForBlog/{BlogId}");
        
        if (response.IsSuccessStatusCode)
        {
            var likeCount = await response.Content.ReadFromJsonAsync<int>();
            return likeCount;
        }
        
        return 0;
    }

    private async Task LoadBlogDetails()
    {
        await SetAuthorizationHeader();

        Blog = await HttpClient.GetFromJsonAsync<BlogDto>($"http://localhost:5149/api/Blog/GetBlogById/{BlogId}");
            StateHasChanged();
        if (Blog == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Blog.LikesCount = await GetLikeCount();
            var isLiked = await CheckIfLiked();
            LikeIcon = isLiked ? "Assets/IMG/like-icon-red.svg" : "Assets/IMG/like-icon-gray.svg";
        }
    }

    private async Task SearchBlogsByTitle(string query)
    {
        await SetAuthorizationHeader();

        var response = await HttpClient.GetAsync($"api/Blog/SearchBlogsByTitle?title={Uri.EscapeDataString(query)}");

        if (response.IsSuccessStatusCode)
        {
            var blogs = await response.Content.ReadFromJsonAsync<IEnumerable<Blog>>();
        }
    }

    private async Task LoadBlogs(int topicId)
    {
        await SetAuthorizationHeader();

        var response = await HttpClient.GetAsync($"http://localhost:5149/api/Blog/GetBlogsByTopic/{topicId}");
        StateHasChanged();
        if (response.IsSuccessStatusCode)
        {
            blogs = await response.Content.ReadFromJsonAsync<List<BlogDto>>();
            StateHasChanged();
        }
        else
        {
            Console.Error.WriteLine($"Error: {response.ReasonPhrase}");
        }
    }
    private async Task SetActiveTopic(int topicId)
    {
        selectedTopicId = topicId;
        await LoadBlogs(topicId);
    }

    private async Task<bool> CheckIfLiked()
    {
        await SetAuthorizationHeader();

        var response = await HttpClient.GetAsync($"http://localhost:5149/api/Likes/IsLiked?blogId={BlogId}&userId={UserId}");

        if (response.IsSuccessStatusCode)
        {
            var isLiked = await response.Content.ReadFromJsonAsync<bool>();
            return isLiked;
        }

        return false;
    }

    private async Task LikeBlog()
    {
        await SetAuthorizationHeader();

        var likeRequest = new
        {
            BlogId = BlogId,
            UserId = UserId
        };

        var response = await HttpClient.PostAsJsonAsync("http://localhost:5149/api/Likes/LikeBlog", likeRequest);

        if (response.IsSuccessStatusCode)
        {
            var likeCount = await response.Content.ReadFromJsonAsync<int>();
            
            Blog.LikesCount = likeCount;

            LikeIcon = (LikeIcon == "Assets/IMG/like-icon-gray.svg") ? "Assets/IMG/like-icon-red.svg" : "Assets/IMG/like-icon-gray.svg";
            
            StateHasChanged();
        }
        else
        {
            Console.Error.WriteLine($"Error when liking: {response.ReasonPhrase}");
        }
    }


    private async Task OpenComments()
    {
        NavigationManager.NavigateTo($"/blog/comments/{BlogId}?userId={UserId}");
    }
}