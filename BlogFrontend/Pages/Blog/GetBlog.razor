@page "/blog/{BlogId:guid}"
@attribute [Authorize]
@using Blazored.LocalStorage
@using BlogFrontend.Models
@using BlogFrontend.Services
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject TopicService TopicService
@inject BlogService BlogService
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService


<div class="blog-page" style="color: #fff;">
    <Header OnSearchCompleted="HandleSearchCompleted" />
    <Menu OnTopicSelected="LoadBlogs" />

    <div class="blog-container">
        <div class="blog-details">
            <div class="blog-header">
                <h1 class="blog-title2">@Blog?.Title</h1>
                <p>by @Blog.UserName on @Blog.CreationDate.ToShortDateString()</p>
            </div>
            <div class="blog-content" style="width: 700px; margin-top: 25px">
                @if (Blog != null)
                {
                    @((MarkupString)Blog.Text)
                }
            </div>
            <div class="blog-image">
                <img src="http://135.236.156.195/api/Blog/Image/@Blog.Id" alt="@Blog?.Title" width="720" height="700"/>
            </div>
            <hr style="color: #fff;">
            <div class="blog-actions">
                <button @onclick="ToggleLike" class="like-button">
                    <img src="@LikeIcon" alt="Like" />
                    <span>@Blog.LikesCount</span>
                </button>
                <button @onclick="OpenComments" class="comment-button">
                    <img src="Assets/IMG/comment-icon.svg" alt="Comment" />
                </button>
                <button class="favorites-button">
                    <img src="Assets/IMG/favorites-icon.svg" alt="Favorites" />
                </button>
            </div>
                <hr style="color: #fff;">
        </div>
        <div class="blog-right-side get-blog-right-side">
            <div class="blog-list right-side-list" id="blog-list">
                @if (blogs != null)
                {
                    @foreach (var blog in blogs)
                    {
                        <a href="blog/@blog.Id" class="blog-link">
                            <div class="blog-item">
                                <div class="content">
                                    <div class="author">
                                        <img src="@AvatarUrl" alt="Avatar" style="width: 30px; height: 30px; border-radius: 100px; margin-right: 12px;">
                                        @blog.UserName
                                    </div>
                                    <div class="title">@blog.Title</div>
                                    <div class="date">@blog.CreationDate.ToShortDateString()</div>
                                </div>
                                <img class="blog-img" src="http://135.236.156.195/api/Blog/Image/@blog.Id" alt="@blog.Title">
                            </div>
                        </a>
                    }
                }
                else
                {
                    <p>No blogs available for the topic: <span style="color: #9BD21C;">@selectedTopicName</span></p>
                }
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid BlogId { get; set; }
    
    private BlogDto Blog { get; set; }
    private IEnumerable<Topic> Topics { get; set; }
    private Guid UserId { get; set; }
    private List<Topic> topics = new();
    private List<BlogDto> blogs = new();
    private int? selectedTopicId;
    private string LikeIcon { get; set; } = "Assets/IMG/like-icon-gray.svg";
    private string selectedTopicName;
    private string userName;
    private string AvatarUrl;

    protected override async Task OnInitializedAsync()
    {
        var userIdString = await LocalStorageService.GetItemAsync<string>("userId");

        if (Guid.TryParse(userIdString, out var parsedUserId))
        {
            UserId = parsedUserId;
        }
        else
        {
            Console.Error.WriteLine("Invalid User ID format.");
        }
    
        await LoadBlogDetails();
        StateHasChanged();

        var token = await LocalStorageService.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            
            userName = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
            AvatarUrl = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData)?.Value;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadBlogDetails();
        StateHasChanged();
    }

    private void HandleSearchCompleted(List<BlogDto> searchResults)
    {
        blogs = searchResults;
        StateHasChanged();
    }

    private async Task SetAuthorizationHeader()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (!string.IsNullOrEmpty(token))
        {
            token = token.Trim('"');
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private async Task<int> GetLikeCount()
    {
        await SetAuthorizationHeader();

        var response = await HttpClient.GetAsync($"http://135.236.156.195/api/Likes/GetLikesForBlog/{BlogId}");
        
        if (response.IsSuccessStatusCode)
        {
            var likeCount = await response.Content.ReadFromJsonAsync<int>();
            return likeCount;
        }
        
        return 0;
    }

    private async Task LoadBlogDetails()
    {
        await SetAuthorizationHeader();

        Blog = await HttpClient.GetFromJsonAsync<BlogDto>($"http://135.236.156.195/api/Blog/GetBlogById/{BlogId}");
            StateHasChanged();
        if (Blog == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Blog.LikesCount = await GetLikeCount();
            var isLiked = await CheckIfLiked();
            LikeIcon = isLiked ? "Assets/IMG/like-icon-red.svg" : "Assets/IMG/like-icon-gray.svg";
        }
    }

    private async Task SearchBlogsByTitle(string query)
    {
        await SetAuthorizationHeader();

        var response = await HttpClient.GetAsync($"http://135.236.156.195/api/Blog/SearchBlogsByTitle?title={Uri.EscapeDataString(query)}");

        if (response.IsSuccessStatusCode)
        {
            var blogs = await response.Content.ReadFromJsonAsync<IEnumerable<Blog>>();
        }
    }

    private async Task LoadBlogs((int topicId, string topicName) topicInfo)
    {
        selectedTopicName = topicInfo.topicName;
        await SetAuthorizationHeader();

        var request = new HttpRequestMessage(HttpMethod.Get, $"http://135.236.156.195/api/Blog/GetBlogsByTopic/{topicInfo.topicId}");

        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            blogs = await response.Content.ReadFromJsonAsync<List<BlogDto>>();
            StateHasChanged();
        }
        else
        {
            blogs = null;
            StateHasChanged();
        }
    }

    private async Task<bool> CheckIfLiked()
{
    await SetAuthorizationHeader();

    var response = await HttpClient.GetAsync($"http://135.236.156.195/api/Likes/IsLiked?blogId={BlogId}&userId={UserId}");

    if (response.IsSuccessStatusCode)
    {
        var isLiked = await response.Content.ReadFromJsonAsync<bool>();
        return isLiked;
    }

    return false;
}

    private async Task ToggleLike()
    {
        await SetAuthorizationHeader();

        var likeRequest = new
        {
            BlogId = BlogId,
            UserId = UserId
        };

        string endpoint = await CheckIfLiked() ? "UnlikeBlog" : "LikeBlog";

        var response = await HttpClient.PostAsJsonAsync($"http://135.236.156.195/api/Likes/{endpoint}", likeRequest);

        if (response.IsSuccessStatusCode)
        {
            var likeCount = await response.Content.ReadFromJsonAsync<int>();
            Blog.LikesCount = likeCount;

            LikeIcon = (LikeIcon == "Assets/IMG/like-icon-gray.svg") ? "Assets/IMG/like-icon-red.svg" : "Assets/IMG/like-icon-gray.svg";
            
            if (endpoint == "LikeBlog")
            {
                var notification = new Notification
                {
                    UserId = Blog.UserId,
                    UserName = userName,
                    Message = $" liked your blog",
                    Type = "Like"
                };
                await CreateNotification(notification);
            }
            
            StateHasChanged();
        }
        else
        {
            Console.Error.WriteLine($"Error when toggling like: {response.ReasonPhrase}");
        }
    }


    private async Task CreateNotification(Notification notification)
    {
        await SetAuthorizationHeader();
        var response = await HttpClient.PostAsJsonAsync("http://20.218.162.5/api/Notification/CreateNotification", notification);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Notification created successfully.");
        }
        else
        {
            Console.Error.WriteLine("Failed to create notification.");
        }
    }
    
    private async Task OpenComments()
    {
        NavigationManager.NavigateTo($"/blog/comments/{BlogId}");
    }
}