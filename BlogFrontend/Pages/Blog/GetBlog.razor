@page "/blog/{BlogId:guid}"
@using Blazored.LocalStorage
@using BlogFrontend.Models
@using BlogFrontend.Services
@inject TopicService TopicService
@inject BlogService BlogService
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public Guid BlogId { get; set; }
    
    private Blog Blog { get; set; }
    private IEnumerable<Topic> Topics { get; set; }
    private string UserId { get; set; }

    private async Task LoadBlogDetails()
    {
        Blog = await HttpClient.GetFromJsonAsync<Blog>($"http://localhost:5149/api/Blog/GetBlogById/{BlogId}");

        if (Blog == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SearchBlogsByName(string query)
    {
        var response = await HttpClient.GetAsync($"api/Blog/SearchBlogsByName?name={Uri.EscapeDataString(query)}");

        if (response.IsSuccessStatusCode)
        {
            var blogs = await response.Content.ReadFromJsonAsync<IEnumerable<Blog>>();
        }
    }
}

<div class="blog-page" style="color: #fff;">
    <Header />
    <Menu />

    <div class="blog-container">
        <div class="blog-details">
            <div class="blog-header">
                <h1 style="text-align: center; margin-bottom: 25px; margin-top: 25px;">@Blog?.Title</h1>
            </div>
            <div class="blog-image">
                <img src="@Blog.PictureUrl" alt="@Blog?.Title" width="700" height="700"/>
            </div>
            <div class="blog-content" style="width: 700px; text-align: center; margin-top: 25px">
                @if (Blog != null)
                {
                    @((MarkupString)Blog.Text)
                    <p style="color: #333;">by @Blog.User?.Name on @Blog.CreationDate</p>
                }
            </div>
        </div>
        <div class="blog-right-side">
            <div class="blog-list right-side-list" id="blog-list">
                @if (blogs != null)
                {
                    @foreach (var blog in blogs)
                    {
                        <a href="blog/@blog.Id?userId=@UserId" class="blog-link">
                            <div class="blog-item">
                                <div class="content">
                                    <div class="author">@blog.User?.Name ?? "Unknown"</div>
                                    <div class="title">@blog.Title</div>
                                    <div class="date">@blog.CreationDate.ToShortDateString()</div>
                                </div>
                                <img class="blog-img" src="@blog.PictureUrl" alt="@blog.Title">
                            </div>
                        </a>
                    }
                }
            </div>
        </div>
    </div>
</div>


@code {
    private List<Topic> topics = new();
    private List<Blog> blogs = new();
    private int? selectedTopicId;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);
        UserId = queryParameters["userId"];
        
        if (string.IsNullOrEmpty(UserId))
        {
            UserId = await LocalStorage.GetItemAsStringAsync("userId");
        }

        await LoadBlogDetails();

        var topicList = await TopicService.GetTopicsAsync();
        if (topicList != null)
        {
            topics = topicList.ToList();
            if (topics.Count > 0)
            {
                selectedTopicId = topics.FirstOrDefault()?.Id;
                await LoadBlogs(selectedTopicId.Value);
            }
        }
    }

    private async Task SetActiveTopic(int topicId)
    {
        selectedTopicId = topicId;
        await LoadBlogs(topicId);
    }

    private async Task LoadBlogs(int topicId)
    {
        var blogList = await BlogService.GetBlogsByTopicAsync(topicId);
        blogs = blogList.ToList();
    }
}