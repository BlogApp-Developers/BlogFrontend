@using System.Net.Http.Headers
@using BlogFrontend.Models
@using BlogFrontend.Services
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.Authorization

<div class="settings-menu">
    <div class="section">
        <h3>Account</h3><hr class="title-border">
        <ul>
            <li><a href="javascript:void(0);" @onclick="OpenEditProfile">Edit profile</a></li>
            <li><a href="javascript:void(0);" @onclick="ShowSavedList">Saved List</a></li>
        </ul>
    </div>

    <div class="section">
        <h3>Notifications</h3><hr class="title-border">
        <ul>
            <li>
                <span>Notifications</span>
                <label class="switch">
                    <input type="checkbox" @onchange="OnAreNotificationsEnabledChanged" checked="@areNotificationsEnabled" />
                    <span class="slider round"></span>
                </label>
            </li>
        </ul>
    </div>

    <div class="section">
        <h3>More</h3><hr class="title-border">
        <ul>
            <li>
                <a href="javascript:void(0);" @onclick="Logout">Logout</a>
            </li>
        </ul>
    </div>
</div>

@code {
    private bool AppNotificationsEnabled { get; set; } = true;
    private bool OtherNotificationsEnabled { get; set; } = true;
    private bool areNotificationsEnabled;
    private string newEmail = string.Empty;
    private bool showEditProfile = false;

    [Parameter] public EventCallback OnEditProfileClicked { get; set; }
    [Parameter] public EventCallback OnShowSavedListClicked { get; set; }
    private void ShowSavedList()
    {
        OnShowSavedListClicked.InvokeAsync();
    }

    private void OpenEditProfile()
    {
        OnEditProfileClicked.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var storedValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "areNotificationsEnabled");
        if (!string.IsNullOrEmpty(storedValue))
        {
            areNotificationsEnabled = bool.Parse(storedValue);
        }
        else
        {
            areNotificationsEnabled = false;
        }
    }

    private async Task OnAreNotificationsEnabledChanged(ChangeEventArgs e)
    {
        areNotificationsEnabled = (bool)e.Value;
        
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "areNotificationsEnabled", areNotificationsEnabled.ToString());
        
        var success = await SendNotificationSettingChange(areNotificationsEnabled);
        if (success)
        {
            Console.WriteLine("Notification setting updated successfully.");
        }
        else
        {
            Console.Error.WriteLine("Failed to update notification setting.");
        }
    }
    private async Task<bool> SendNotificationSettingChange(bool value)
    {
        try
        {
            var token = await LocalStorageService.GetItemAsync<string>("jwt");
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            var response = await HttpClient.PutAsJsonAsync("http://localhost:5259/api/Settings/ChangeEmailSend", value);
            return response.IsSuccessStatusCode;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error sending request: {ex.Message}");
            return false;
        }
    }

    private async Task Logout()
    {
        await LocalStorageService.RemoveItemAsync("jwt");
        await LocalStorageService.RemoveItemAsync("refresh");
        await LocalStorageService.RemoveItemAsync("userId");

        NavigationManager.NavigateTo("/");
    }
}
