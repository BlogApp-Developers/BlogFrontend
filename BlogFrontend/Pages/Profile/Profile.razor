@page "/Profile"
@using BlogFrontend.Models
@using BlogFrontend.Providers
@using BlogFrontend.Services
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService

<div class="blog-page" style="color: #fff;">
    <Header OnSearchCompleted="HandleSearchCompleted" />
    <div class="menu" id="menu">
        <div class="menu-content menu-items dragscroll">
            <a class="menu-item @(selectedMenuItem == "Public" ? "active" : "")" @onclick='() => SelectMenuItem("Public")'>Public</a>
            @* <a class="menu-item @(selectedMenuItem == "About me" ? "active" : "")" @onclick='() => SelectMenuItem("About me")'>About me</a> *@
        </div>
    </div>
    <div class="profile-container">
        <div class="blog-list list-with-scroll" id="blog-list">
            @if (blogs != null)
            {
                @foreach (var blog in blogs)
                {
                    <a href="blog/@blog.Id" class="blog-link">
                        <div class="blog-item">
                            <div class="content">
                                <div class="author">
                                    <img src="@AvatarUrl" alt="Avatar" style="width: 30px; height: 30px; border-radius: 100px; margin-right: 12px;">
                                    @blog.UserName
                                </div>
                                <div class="title">@blog.Title</div>
                                <div class="date">@blog.CreationDate.ToShortDateString()</div>
                            </div>
                            <img class="blog-img" src="http://localhost:5149/api/Blog/Image/@blog.Id" alt="@blog.Title">
                        </div>
                    </a>
                }
            }
            else
            {
                <p>No blogs available for the topic: <span style="color: #9BD21C;">@selectedTopicName</span></p>
            }
        </div>
        <div class="profile-right">
            <div class="top-bar">
                <button @onclick="ToggleViewMode" class="menu-toggle">
                    @if (isSettingsView)
                    {
                        <img src="Assets/IMG/profile.png" alt="" width="40px">
                    }
                    else if (isSavedListView)
                    {
                        <img src="Assets/IMG/settings-icon.png" alt="" width="40px">
                    }
                    else
                    {
                        <img src="Assets/IMG/settings-icon.png" alt="" width="40px">
                    }
                </button>
            </div>

            @if (isSettingsView)
            {
                <SettingsView OnEditProfileClicked="ShowEditProfileView" OnShowSavedListClicked="ShowSavedListView"/>
            }
            else if (isSavedListView)
            {
                <SavedListView savedBlogs="@blogs" />
            }
            else if (isEditProfileView)
            {
                <EditProfileView AvatarUrl="@AvatarUrl" userName="@userName" User="@user" />
            }
            else
            {
                <ProfileView AvatarUrl="@AvatarUrl" userName="@userName" User="@user" />
            }
        </div>
    </div>
</div>

@code {
    private Guid UserId { get; set; }
    private UserDto user;
    private List<BlogDto> blogs = new();
    private string selectedTopicName;
    private string selectedMenuItem = "Public";
    private string userName;
    private string AvatarUrl;
    private bool isSettingsView = false;
    private bool isEditProfileView = false;
    private bool isSavedListView = false;

    private void ToggleViewMode()
    {
        if (isSettingsView)
        {
            isSettingsView = false;
            isEditProfileView = false;
            isSavedListView = false;
        }
        else if (isEditProfileView)
        {
            isEditProfileView = false;
            isSettingsView = true;
            isSavedListView = false;
        }
        else if (isSavedListView)
        {
            isSavedListView = false;
            isSettingsView = true;
        }
        else
        {
            isSettingsView = true;
        }
    }

    private void ShowEditProfileView()
    {
        isSettingsView = false;
        isEditProfileView = true;
        isSavedListView = false;
    }

    private void ShowSavedListView()
    {
        isSettingsView = false;
        isEditProfileView = false;
        isSavedListView = true;
    }
    
    protected override async Task OnInitializedAsync()
    {
        var userIdString = await LocalStorageService.GetItemAsync<string>("userId");

        if (Guid.TryParse(userIdString, out var parsedUserId))
        {
            UserId = parsedUserId;
            await LoadBlogs();
        }
        else
        {
            Console.Error.WriteLine("Invalid User ID format.");
        }

        var token = await LocalStorageService.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            
            userName = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
            AvatarUrl = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData)?.Value;
        }
        await GetUser(UserId);
    }

    private async Task GetUser(Guid userId)
    {
        try
        {
            var response = await HttpClient.GetAsync($"http://localhost:5259/api/Identity/GetUser/{userId}");
            if (response.IsSuccessStatusCode)
            {
                user = await response.Content.ReadFromJsonAsync<UserDto>();
                Console.WriteLine("User data retrieved successfully.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Failed to retrieve user: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task LoadBlogs()
    {
        try
        {
            await SetAuthorizationHeader();

            var response = await HttpClient.GetAsync($"http://localhost:5149/api/Blog/GetBlogByUserId/{UserId}");

            if (response.IsSuccessStatusCode)
            {
                blogs = await response.Content.ReadFromJsonAsync<List<BlogDto>>();
            }
            else
            {
                Console.Error.WriteLine($"Error fetching blogs: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while fetching blogs: {ex.Message}");
        }
    }

    private async Task SetAuthorizationHeader()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (!string.IsNullOrEmpty(token))
        {
            token = token.Trim('"');
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private void HandleSearchCompleted(List<BlogDto> searchResults)
    {
        
    }

    private void SelectMenuItem(string menuItem)
    {
        selectedMenuItem = menuItem;
    }
}

<style>
.top-bar {
    display: flex;
    justify-content: flex-end;
    padding: 0 10px 10px 10px;
}

.menu-toggle {
    background: none;
    border: none;
    color: #fff;
    font-size: 24px;
    cursor: pointer;
}

.menu-toggle i {
    color: #fff;
}

</style>