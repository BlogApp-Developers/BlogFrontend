@page "/Notifications"
@attribute [Authorize]
@using BlogFrontend.Models
@using BlogFrontend.Providers
@using BlogFrontend.Services
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService

<div class="blog-page" style="color: #fff;">
    <Header OnSearchCompleted="HandleSearchCompleted" />

    <div class="notifications-container">
        <div class="notifications-left">
            <h2>Notifications</h2>
            <hr style="color: #93939a;">
            <div class="notifications-list">
                @if (notifications != null && notifications.Any())
                {
                    foreach (var notification in notifications)
                    {
                        <div class="notification-item">
                            <img src="@AvatarUrl" class="notification-avatar" alt="Avatar" />
                            <div class="notification-details">
                                <span class="notification-user">@notification.UserName</span>
                                <span class="notification-action">@notification.Message</span>
                                <span class="notification-time">@notification.CreatedAt.ToShortDateString()</span>
                            </div>
                            <button class="notification-follow-btn">Follow</button>
                        </div>
                        <hr style="color: #93939a;">
                    }
                }
                else
                {
                    <p>No notifications found.</p>
                }
            </div>
        </div>
        <div class="notifications-right">
            <BlogFrontend.Pages.Profile.ProfileView AvatarUrl="@AvatarUrl" userName="@userName" User="@user" />
        </div>
    </div>
</div>

@code {
    private Guid UserId { get; set; }
    private UserDto user;
    private List<Notification> notifications = new();
    private string userName;
    private string AvatarUrl;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var userIdString = await LocalStorageService.GetItemAsync<string>("userId");

        if (Guid.TryParse(userIdString, out var parsedUserId))
        {
            UserId = parsedUserId;
            await LoadNotifications();
        }
        else
        {
            Console.Error.WriteLine("Invalid User ID format.");
        }

        var token = await LocalStorageService.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            
            userName = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
            AvatarUrl = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData)?.Value;
        }
        await GetUser(UserId);

        await SetupSignalRConnection(token);
    }

    private async Task SetupSignalRConnection(string token)
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5205/notificationsHub", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();

        hubConnection.On<string>("ReceiveNotification", (message) =>
        {
            notifications.Add(new Notification
            {
                Message = message,
                UserName = userName,
                CreatedAt = DateTime.Now
            });
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task GetUser(Guid userId)
    {
        try
        {
            var response = await HttpClient.GetAsync($"http://localhost:5259/api/Identity/GetUser/{userId}");
            if (response.IsSuccessStatusCode)
            {
                user = await response.Content.ReadFromJsonAsync<UserDto>();
                Console.WriteLine("User data retrieved successfully.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Failed to retrieve user: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task LoadNotifications()
    {
        await SetAuthorizationHeader();
        
        try
        {
            notifications = await HttpClient.GetFromJsonAsync<List<Notification>>($"http://localhost:5205/api/Notification/GetUserNotifications/{UserId}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load notifications: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task SetAuthorizationHeader()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (!string.IsNullOrEmpty(token))
        {
            token = token.Trim('"');
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private void HandleSearchCompleted(List<BlogDto> searchResults)
    {
        
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
